package com.company.speedment.test.twitter.db0.twitter.tweets.impl;

import com.company.speedment.test.twitter.db0.twitter.tweets.Tweets;
import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.TimestampIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@6136c32c.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class TweetsManagerImpl extends AbstractSqlManager<Tweets> {
    
    private final TypeMapper<Integer, Integer> idTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> userTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Timestamp, Timestamp> createdAtTypeMapper = new TimestampIdentityMapper();
    private final TypeMapper<String, String> textTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> sourceTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> isTruncatedTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> inReplyToStatusIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> inReplyToUserIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> isFavoritedTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> inReplyToScreenNameTypeMapper = new StringIdentityMapper();
    
    public TweetsManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Tweets> getEntityClass() {
        return Tweets.class;
    }
    
    @Override
    public Object get(Tweets entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "user" : return entity.getUser();
            case "createdAt" : return entity.getCreatedAt();
            case "text" : return entity.getText();
            case "source" : return entity.getSource();
            case "isTruncated" : return entity.getIsTruncated();
            case "inReplyToStatusId" : return entity.getInReplyToStatusId();
            case "inReplyToUserId" : return entity.getInReplyToUserId();
            case "isFavorited" : return entity.getIsFavorited();
            case "inReplyToScreenName" : return entity.getInReplyToScreenName();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Tweets entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Integer) value); break;
            case "user" : entity.setUser((String) value); break;
            case "createdAt" : entity.setCreatedAt((Timestamp) value); break;
            case "text" : entity.setText((String) value); break;
            case "source" : entity.setSource((String) value); break;
            case "isTruncated" : entity.setIsTruncated((String) value); break;
            case "inReplyToStatusId" : entity.setInReplyToStatusId((Integer) value); break;
            case "inReplyToUserId" : entity.setInReplyToUserId((Integer) value); break;
            case "isFavorited" : entity.setIsFavorited((String) value); break;
            case "inReplyToScreenName" : entity.setInReplyToScreenName((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("db0.twitter.tweets");
    }
    
    protected Tweets defaultReadEntity(ResultSet resultSet) {
        final Tweets entity = newInstance();
        try {
            entity.setId(idTypeMapper.toJavaType(resultSet.getInt(1)));
            entity.setUser(userTypeMapper.toJavaType(resultSet.getString(2)));
            entity.setCreatedAt(createdAtTypeMapper.toJavaType(resultSet.getTimestamp(3)));
            entity.setText(textTypeMapper.toJavaType(resultSet.getString(4)));
            entity.setSource(sourceTypeMapper.toJavaType(resultSet.getString(5)));
            entity.setIsTruncated(isTruncatedTypeMapper.toJavaType(resultSet.getString(6)));
            entity.setInReplyToStatusId(inReplyToStatusIdTypeMapper.toJavaType(getInt(resultSet, 7)));
            entity.setInReplyToUserId(inReplyToUserIdTypeMapper.toJavaType(getInt(resultSet, 8)));
            entity.setIsFavorited(isFavoritedTypeMapper.toJavaType(resultSet.getString(9)));
            entity.setInReplyToScreenName(inReplyToScreenNameTypeMapper.toJavaType(resultSet.getString(10)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Tweets newInstance() {
        return new TweetsImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Tweets entity) {
        return entity.getId();
    }
}