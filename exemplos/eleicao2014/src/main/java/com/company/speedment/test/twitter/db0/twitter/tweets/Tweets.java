package com.company.speedment.test.twitter.db0.twitter.tweets;

import com.speedment.Entity;
import com.speedment.field.ComparableField;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.sql.Timestamp;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * An interface representing an entity (for example, a row) in the
 * com.speedment.internal.ui.config.TableProperty@6136c32c.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface Tweets extends Entity<Tweets> {
    
    /**
     * This Field corresponds to the {@link Tweets} field that can be obtained
     * using the {@link Tweets#getId()} method.
     */
    public final static ComparableField<Tweets, Integer> ID = new ComparableFieldImpl<>("id", Tweets::getId, Tweets::setId);
    /**
     * This Field corresponds to the {@link Tweets} field that can be obtained
     * using the {@link Tweets#getUser()} method.
     */
    public final static StringField<Tweets> USER = new StringFieldImpl<>("user", Tweets::getUser, Tweets::setUser);
    /**
     * This Field corresponds to the {@link Tweets} field that can be obtained
     * using the {@link Tweets#getCreatedAt()} method.
     */
    public final static ComparableField<Tweets, Timestamp> CREATEDAT = new ComparableFieldImpl<>("createdAt", Tweets::getCreatedAt, Tweets::setCreatedAt);
    /**
     * This Field corresponds to the {@link Tweets} field that can be obtained
     * using the {@link Tweets#getText()} method.
     */
    public final static StringField<Tweets> TEXT = new StringFieldImpl<>("text", Tweets::getText, Tweets::setText);
    /**
     * This Field corresponds to the {@link Tweets} field that can be obtained
     * using the {@link Tweets#getSource()} method.
     */
    public final static StringField<Tweets> SOURCE = new StringFieldImpl<>("source", Tweets::getSource, Tweets::setSource);
    /**
     * This Field corresponds to the {@link Tweets} field that can be obtained
     * using the {@link Tweets#getIsTruncated()} method.
     */
    public final static StringField<Tweets> ISTRUNCATED = new StringFieldImpl<>("isTruncated", Tweets::getIsTruncated, Tweets::setIsTruncated);
    /**
     * This Field corresponds to the {@link Tweets} field that can be obtained
     * using the {@link Tweets#getInReplyToStatusId()} method.
     */
    public final static ComparableField<Tweets, Integer> INREPLYTOSTATUSID = new ComparableFieldImpl<>("inReplyToStatusId", o -> o.getInReplyToStatusId().orElse(null), Tweets::setInReplyToStatusId);
    /**
     * This Field corresponds to the {@link Tweets} field that can be obtained
     * using the {@link Tweets#getInReplyToUserId()} method.
     */
    public final static ComparableField<Tweets, Integer> INREPLYTOUSERID = new ComparableFieldImpl<>("inReplyToUserId", o -> o.getInReplyToUserId().orElse(null), Tweets::setInReplyToUserId);
    /**
     * This Field corresponds to the {@link Tweets} field that can be obtained
     * using the {@link Tweets#getIsFavorited()} method.
     */
    public final static StringField<Tweets> ISFAVORITED = new StringFieldImpl<>("isFavorited", Tweets::getIsFavorited, Tweets::setIsFavorited);
    /**
     * This Field corresponds to the {@link Tweets} field that can be obtained
     * using the {@link Tweets#getInReplyToScreenName()} method.
     */
    public final static StringField<Tweets> INREPLYTOSCREENNAME = new StringFieldImpl<>("inReplyToScreenName", Tweets::getInReplyToScreenName, Tweets::setInReplyToScreenName);
    
    /**
     * Returns the id of this Tweets. The id field corresponds to the database
     * column db0.twitter.tweets.id.
     * 
     * @return the id of this Tweets
     */
    Integer getId();
    
    /**
     * Returns the user of this Tweets. The user field corresponds to the
     * database column db0.twitter.tweets.user.
     * 
     * @return the user of this Tweets
     */
    String getUser();
    
    /**
     * Returns the createdAt of this Tweets. The createdAt field corresponds to
     * the database column db0.twitter.tweets.createdAt.
     * 
     * @return the createdAt of this Tweets
     */
    Timestamp getCreatedAt();
    
    /**
     * Returns the text of this Tweets. The text field corresponds to the
     * database column db0.twitter.tweets.text.
     * 
     * @return the text of this Tweets
     */
    String getText();
    
    /**
     * Returns the source of this Tweets. The source field corresponds to the
     * database column db0.twitter.tweets.source.
     * 
     * @return the source of this Tweets
     */
    String getSource();
    
    /**
     * Returns the isTruncated of this Tweets. The isTruncated field corresponds
     * to the database column db0.twitter.tweets.isTruncated.
     * 
     * @return the isTruncated of this Tweets
     */
    String getIsTruncated();
    
    /**
     * Returns the inReplyToStatusId of this Tweets. The inReplyToStatusId field
     * corresponds to the database column db0.twitter.tweets.inReplyToStatusId.
     * 
     * @return the inReplyToStatusId of this Tweets
     */
    Optional<Integer> getInReplyToStatusId();
    
    /**
     * Returns the inReplyToUserId of this Tweets. The inReplyToUserId field
     * corresponds to the database column db0.twitter.tweets.inReplyToUserId.
     * 
     * @return the inReplyToUserId of this Tweets
     */
    Optional<Integer> getInReplyToUserId();
    
    /**
     * Returns the isFavorited of this Tweets. The isFavorited field corresponds
     * to the database column db0.twitter.tweets.isFavorited.
     * 
     * @return the isFavorited of this Tweets
     */
    String getIsFavorited();
    
    /**
     * Returns the inReplyToScreenName of this Tweets. The inReplyToScreenName
     * field corresponds to the database column
     * db0.twitter.tweets.inReplyToScreenName.
     * 
     * @return the inReplyToScreenName of this Tweets
     */
    String getInReplyToScreenName();
    
    /**
     * Sets the id of this Tweets. The id field corresponds to the database
     * column db0.twitter.tweets.id.
     * 
     * @param id to set of this Tweets
     * @return this Tweets instance
     */
    Tweets setId(Integer id);
    
    /**
     * Sets the user of this Tweets. The user field corresponds to the database
     * column db0.twitter.tweets.user.
     * 
     * @param user to set of this Tweets
     * @return this Tweets instance
     */
    Tweets setUser(String user);
    
    /**
     * Sets the createdAt of this Tweets. The createdAt field corresponds to the
     * database column db0.twitter.tweets.createdAt.
     * 
     * @param createdAt to set of this Tweets
     * @return this Tweets instance
     */
    Tweets setCreatedAt(Timestamp createdAt);
    
    /**
     * Sets the text of this Tweets. The text field corresponds to the database
     * column db0.twitter.tweets.text.
     * 
     * @param text to set of this Tweets
     * @return this Tweets instance
     */
    Tweets setText(String text);
    
    /**
     * Sets the source of this Tweets. The source field corresponds to the
     * database column db0.twitter.tweets.source.
     * 
     * @param source to set of this Tweets
     * @return this Tweets instance
     */
    Tweets setSource(String source);
    
    /**
     * Sets the isTruncated of this Tweets. The isTruncated field corresponds to
     * the database column db0.twitter.tweets.isTruncated.
     * 
     * @param isTruncated to set of this Tweets
     * @return this Tweets instance
     */
    Tweets setIsTruncated(String isTruncated);
    
    /**
     * Sets the inReplyToStatusId of this Tweets. The inReplyToStatusId field
     * corresponds to the database column db0.twitter.tweets.inReplyToStatusId.
     * 
     * @param inReplyToStatusId to set of this Tweets
     * @return this Tweets instance
     */
    Tweets setInReplyToStatusId(Integer inReplyToStatusId);
    
    /**
     * Sets the inReplyToUserId of this Tweets. The inReplyToUserId field
     * corresponds to the database column db0.twitter.tweets.inReplyToUserId.
     * 
     * @param inReplyToUserId to set of this Tweets
     * @return this Tweets instance
     */
    Tweets setInReplyToUserId(Integer inReplyToUserId);
    
    /**
     * Sets the isFavorited of this Tweets. The isFavorited field corresponds to
     * the database column db0.twitter.tweets.isFavorited.
     * 
     * @param isFavorited to set of this Tweets
     * @return this Tweets instance
     */
    Tweets setIsFavorited(String isFavorited);
    
    /**
     * Sets the inReplyToScreenName of this Tweets. The inReplyToScreenName field
     * corresponds to the database column db0.twitter.tweets.inReplyToScreenName.
     * 
     * @param inReplyToScreenName to set of this Tweets
     * @return this Tweets instance
     */
    Tweets setInReplyToScreenName(String inReplyToScreenName);
}