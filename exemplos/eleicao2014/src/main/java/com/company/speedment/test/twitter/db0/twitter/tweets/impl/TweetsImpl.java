package com.company.speedment.test.twitter.db0.twitter.tweets.impl;

import com.company.speedment.test.twitter.db0.twitter.tweets.Tweets;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * An implementation representing an entity (for example, a row) in the
 * com.speedment.internal.ui.config.TableProperty@6136c32c.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class TweetsImpl extends AbstractBaseEntity<Tweets> implements Tweets {
    
    private Integer id;
    private String user;
    private Timestamp createdAt;
    private String text;
    private String source;
    private String isTruncated;
    private Integer inReplyToStatusId;
    private Integer inReplyToUserId;
    private String isFavorited;
    private String inReplyToScreenName;
    
    TweetsImpl(Speedment speedment) {
        super(speedment);
    }
    
    public TweetsImpl(Speedment speedment, final Tweets tweets) {
        super(speedment);
        setId(tweets.getId());
        setUser(tweets.getUser());
        setCreatedAt(tweets.getCreatedAt());
        setText(tweets.getText());
        setSource(tweets.getSource());
        setIsTruncated(tweets.getIsTruncated());
        tweets.getInReplyToStatusId().ifPresent(this::setInReplyToStatusId);
        tweets.getInReplyToUserId().ifPresent(this::setInReplyToUserId);
        setIsFavorited(tweets.getIsFavorited());
        setInReplyToScreenName(tweets.getInReplyToScreenName());
    }
    
    @Override
    public Integer getId() {
        return id;
    }
    
    @Override
    public String getUser() {
        return user;
    }
    
    @Override
    public Timestamp getCreatedAt() {
        return createdAt;
    }
    
    @Override
    public String getText() {
        return text;
    }
    
    @Override
    public String getSource() {
        return source;
    }
    
    @Override
    public String getIsTruncated() {
        return isTruncated;
    }
    
    @Override
    public Optional<Integer> getInReplyToStatusId() {
        return Optional.ofNullable(inReplyToStatusId);
    }
    
    @Override
    public Optional<Integer> getInReplyToUserId() {
        return Optional.ofNullable(inReplyToUserId);
    }
    
    @Override
    public String getIsFavorited() {
        return isFavorited;
    }
    
    @Override
    public String getInReplyToScreenName() {
        return inReplyToScreenName;
    }
    
    @Override
    public final TweetsImpl setId(Integer id) {
        this.id = id;
        return this;
    }
    
    @Override
    public final TweetsImpl setUser(String user) {
        this.user = user;
        return this;
    }
    
    @Override
    public final TweetsImpl setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
    public final TweetsImpl setText(String text) {
        this.text = text;
        return this;
    }
    
    @Override
    public final TweetsImpl setSource(String source) {
        this.source = source;
        return this;
    }
    
    @Override
    public final TweetsImpl setIsTruncated(String isTruncated) {
        this.isTruncated = isTruncated;
        return this;
    }
    
    @Override
    public final TweetsImpl setInReplyToStatusId(Integer inReplyToStatusId) {
        this.inReplyToStatusId = inReplyToStatusId;
        return this;
    }
    
    @Override
    public final TweetsImpl setInReplyToUserId(Integer inReplyToUserId) {
        this.inReplyToUserId = inReplyToUserId;
        return this;
    }
    
    @Override
    public final TweetsImpl setIsFavorited(String isFavorited) {
        this.isFavorited = isFavorited;
        return this;
    }
    
    @Override
    public final TweetsImpl setInReplyToScreenName(String inReplyToScreenName) {
        this.inReplyToScreenName = inReplyToScreenName;
        return this;
    }
    
    @Override
    public Tweets copy() {
        return new TweetsImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "+Objects.toString(getId()));
        sj.add("user = "+Objects.toString(getUser()));
        sj.add("createdAt = "+Objects.toString(getCreatedAt()));
        sj.add("text = "+Objects.toString(getText()));
        sj.add("source = "+Objects.toString(getSource()));
        sj.add("isTruncated = "+Objects.toString(getIsTruncated()));
        sj.add("inReplyToStatusId = "+Objects.toString(getInReplyToStatusId().orElse(null)));
        sj.add("inReplyToUserId = "+Objects.toString(getInReplyToUserId().orElse(null)));
        sj.add("isFavorited = "+Objects.toString(getIsFavorited()));
        sj.add("inReplyToScreenName = "+Objects.toString(getInReplyToScreenName()));
        return "TweetsImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Tweets)) { return false; }
        @SuppressWarnings("unchecked")
        final Tweets thatTweets = (Tweets)that;
        if (!Objects.equals(this.getId(), thatTweets.getId())) {return false; }
        if (!Objects.equals(this.getUser(), thatTweets.getUser())) {return false; }
        if (!Objects.equals(this.getCreatedAt(), thatTweets.getCreatedAt())) {return false; }
        if (!Objects.equals(this.getText(), thatTweets.getText())) {return false; }
        if (!Objects.equals(this.getSource(), thatTweets.getSource())) {return false; }
        if (!Objects.equals(this.getIsTruncated(), thatTweets.getIsTruncated())) {return false; }
        if (!Objects.equals(this.getInReplyToStatusId(), thatTweets.getInReplyToStatusId())) {return false; }
        if (!Objects.equals(this.getInReplyToUserId(), thatTweets.getInReplyToUserId())) {return false; }
        if (!Objects.equals(this.getIsFavorited(), thatTweets.getIsFavorited())) {return false; }
        if (!Objects.equals(this.getInReplyToScreenName(), thatTweets.getInReplyToScreenName())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getUser());
        hash = 31 * hash + Objects.hashCode(getCreatedAt());
        hash = 31 * hash + Objects.hashCode(getText());
        hash = 31 * hash + Objects.hashCode(getSource());
        hash = 31 * hash + Objects.hashCode(getIsTruncated());
        hash = 31 * hash + Objects.hashCode(getInReplyToStatusId());
        hash = 31 * hash + Objects.hashCode(getInReplyToUserId());
        hash = 31 * hash + Objects.hashCode(getIsFavorited());
        hash = 31 * hash + Objects.hashCode(getInReplyToScreenName());
        return hash;
    }
    
    @Override
    public Class<Tweets> getEntityClass_() {
        return Tweets.class;
    }
}